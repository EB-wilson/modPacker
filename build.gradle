import java.util.jar.JarEntry
import java.util.jar.JarOutputStream

plugins {
  id 'java'
}

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

ext{
  //the build number that this mod is made for
  mindustryVersion = "v140"
  arcVersion = "v140.3"

  //version of SDK you will be using
  minSdkAPI = 30

  sdkRoot = System.getenv("ANDROID_HOME")
}

tasks.withType(JavaCompile){
  options.encoding = "UTF-8"
  options.fork = true
  options.forkOptions.jvmArgs.addAll([
      "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
      "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
      "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
      "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
      "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
      "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
  ])
  options.compilerArgs.addAll(['--release', '8'])
}

configurations.all {
  resolutionStrategy {
    force "com.github.Anuken.Arc:arc-core:$arcVersion"
    force "com.github.Anuken.Arc:flabel:$arcVersion"
    force "com.github.Anuken.Arc:fx:$arcVersion"
    force "com.github.Anuken.Arc:arcnet:$arcVersion"
    force "com.github.Anuken.Arc:freetype:$arcVersion"
    force "com.github.Anuken.Arc:g3d:$arcVersion"
    force "com.github.Anuken.Arc:arcnet:$arcVersion"
  }
}

dependencies{
  repositories{
    mavenLocal()
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
  }

  compileOnly "com.github.Anuken.Arc:arc-core:$arcVersion"
  compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

  annotationProcessor "com.github.Anuken:jabel:0.7.0"
}

task jarAndroid{
  dependsOn "jar"

  doLast{
    try {
      File fi = new File("$sdkRoot/platforms/")
      if (!fi.exists()) throw new RuntimeException("android SDK platfroms was not found");
      def platformRoot = fi.listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

      //collect dependencies needed for desugaring
      def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

      try{
        System.out.println("build android dex...")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${rootProject.name}-android.jar ${project.archivesBaseName}-desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
      }
      catch(Throwable ignored) {
        def d8 = new File("$sdkRoot/build-tools/").listFiles().find {
          it.listFiles().any {
            it.name.contains("d8")
          } && Integer.valueOf(it.name.substring(0, 2)) >= minSdkAPI
        }.listFiles().find { it.name.contains("d8") }

        "$d8 $dependencies --min-api 14 --output ${rootProject.name}-android.jar ${project.archivesBaseName}-desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
      }
    }
    catch (Throwable ignored) {
      System.out.println("[WARNING] d8 tool or platform tools was not found, if you was installed android SDK, please check your environment variable")

      delete(
          files("${rootProject.buildDir}/libs/${rootProject.name}-android.jar")
      )

      def out = new JarOutputStream(new FileOutputStream("${rootProject.buildDir}/libs/${rootProject.name}-android.jar"))
      out.putNextEntry(new JarEntry("non-androidMod.txt"))
      StringReader reader = new StringReader(
          "this mod is don't have classes.dex for android, please consider recompile with a SDK or run this mod on desktop only"
      )

      int r
      while((r = reader.read()) != -1){
        out.write(r)
        out.flush()
      }
      out.close()
    }
  }
}

jar{
  dependsOn project(":packModel").getTasksByName("deploy", true)

  archiveFileName = "${project.archivesBaseName}-desktop.jar"

  from(rootDir){
    include "mod.hjson"
    include "icon.png"
  }

  from("assets/") {
    include "**"
  }
}

task deploy(type: Jar){
  dependsOn jarAndroid
  dependsOn jar

  archiveFileName = "${project.archivesBaseName}.jar"

  from{
    [
      zipTree("$buildDir/libs/${project.archivesBaseName}-desktop.jar"),
      zipTree("$buildDir/libs/${project.archivesBaseName}-android.jar")
    ]
  }

  doLast{
    if(project.properties.get("modOutputDir") != null && !project.properties.get("modOutputDir").isEmpty()){
      copy {
        into("$modOutputDir/")
        from("$buildDir/libs/${project.archivesBaseName}.jar")
      }
    }
  }
}

task deployDesktop(type: Jar){
  dependsOn jar
  archiveFileName = "${project.archivesBaseName}.jar"

  from{
    [zipTree("$buildDir/libs/${project.archivesBaseName}-desktop.jar")]
  }

  doLast{
    if(project.properties.get("modOutputDir") != null && !project.properties.get("modOutputDir").isEmpty()){
      copy {
        into("$modOutputDir/")
        from("$buildDir/libs/${project.archivesBaseName}.jar")
      }
    }
  }
}

task debugMod(dependsOn: classes, type: JavaExec){
  dependsOn deployDesktop

  main = "-jar"
  args = [
      project.properties.get("debugGamePath"),
      "-debug"
  ]
}
